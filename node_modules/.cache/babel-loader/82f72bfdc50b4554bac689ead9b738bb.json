{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport WalletConnect from '@walletconnect/client';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError, isHexStrict } from '@web3auth/base';\nimport { WalletConnectProvider } from '@web3auth/ethereum-provider';\nimport log from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass WalletConnectV1Adapter extends BaseAdapter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.WALLET_CONNECT_V1);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"adapterOptions\", void 0);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"adapterData\", {\n      uri: \"\"\n    });\n\n    _defineProperty(this, \"connector\", null);\n\n    _defineProperty(this, \"wcProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.adapterOptions = _objectSpread({}, options);\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get connected() {\n    var _this$connector;\n\n    return !!((_this$connector = this.connector) !== null && _this$connector !== void 0 && _this$connector.connected);\n  }\n\n  get provider() {\n    var _this$wcProvider;\n\n    return ((_this$wcProvider = this.wcProvider) === null || _this$wcProvider === void 0 ? void 0 : _this$wcProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init() {\n    super.checkInitializationRequirements();\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    } // Create a connector\n\n\n    this.connector = this.getWalletConnectInstance();\n    this.wcProvider = new WalletConnectProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    this.status = ADAPTER_STATUS.READY;\n\n    if (this.connector.connected) {\n      this.rehydrated = true;\n      await this.onConnectHandler({\n        accounts: this.connector.accounts,\n        chainId: this.connector.chainId.toString()\n      });\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n    if (this.connected) {\n      await this.onConnectHandler({\n        accounts: this.connector.accounts,\n        chainId: this.connector.chainId.toString()\n      });\n      return this.provider;\n    }\n\n    if (this.status !== ADAPTER_STATUS.CONNECTING) {\n      var _this$adapterOptions$; // for wallet connect qr code modal we have to create a new connector, coz wallet connect internally does not open\n      // modal again on existing instance if connection is pending.\n\n\n      if ((_this$adapterOptions$ = this.adapterOptions.adapterSettings) !== null && _this$adapterOptions$ !== void 0 && _this$adapterOptions$.qrcodeModal) {\n        this.connector = this.getWalletConnectInstance();\n      }\n\n      await this.createNewSession();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\")); // for wallet connect default modal.\n\n      this.connector.on(\"modal_closed\", async () => {\n        this.status = ADAPTER_STATUS.READY;\n        this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n        return reject(new Error(\"User closed modal\"));\n      });\n\n      try {\n        // Subscribe to session connection\n        this.connector.on(\"connect\", async (error, payload) => {\n          if (error) {\n            this.emit(ADAPTER_EVENTS.ERRORED, error);\n          }\n\n          await this.onConnectHandler(payload.params[0]);\n          return resolve(this.provider);\n        });\n      } catch (error) {\n        log.error(\"Wallet connect v1 adapter error while connecting\", error); // ready again to be connected\n\n        this.status = ADAPTER_STATUS.READY;\n        this.rehydrated = true;\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        reject(error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with wallet connect: \".concat((error === null || error === void 0 ? void 0 : error.message) || \"\")));\n      }\n    });\n  }\n\n  async getUserInfo() {\n    if (!this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    const {\n      cleanup\n    } = options;\n    if (!this.connector || !this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    await this.connector.killSession();\n    this.rehydrated = false;\n\n    if (cleanup) {\n      this.connector = null;\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.wcProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async createNewSession() {\n    var _this$adapterOptions, _this$adapterOptions$2;\n\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      forceNewSession: false\n    };\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n    if (opts.forceNewSession && this.connector.pending) {\n      await this.connector.killSession();\n    } // for wallet connect qr modal\n\n\n    if ((_this$adapterOptions = this.adapterOptions) !== null && _this$adapterOptions !== void 0 && (_this$adapterOptions$2 = _this$adapterOptions.adapterSettings) !== null && _this$adapterOptions$2 !== void 0 && _this$adapterOptions$2.qrcodeModal) {\n      var _this$chainConfig;\n\n      await this.connector.createSession({\n        chainId: parseInt(((_this$chainConfig = this.chainConfig) === null || _this$chainConfig === void 0 ? void 0 : _this$chainConfig.chainId) || \"0x1\", 16)\n      });\n      return;\n    } // for web3auth qr code modal\n\n\n    return new Promise((resolve, reject) => {\n      var _this$chainConfig2;\n\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      log.debug(\"creating new session for web3auth wallet connect\");\n      this.connector.on(\"display_uri\", async (err, payload) => {\n        var _this$connector2;\n\n        if (err) {\n          this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.connectionError(\"Failed to display wallet connect qr code\"));\n          return reject(err);\n        }\n\n        const uri = payload.params[0];\n        this.updateAdapterData({\n          uri\n        });\n        (_this$connector2 = this.connector) === null || _this$connector2 === void 0 ? void 0 : _this$connector2.off(\"display_uri\");\n        return resolve();\n      });\n      this.connector.createSession({\n        chainId: parseInt(((_this$chainConfig2 = this.chainConfig) === null || _this$chainConfig2 === void 0 ? void 0 : _this$chainConfig2.chainId) || \"0x1\", 16)\n      }).catch(error => {\n        log.error(\"error while creating new wallet connect session\", error);\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        return reject(error);\n      });\n    });\n  }\n\n  async onConnectHandler(params) {\n    if (!this.connector || !this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"Chain config is not set\");\n    const {\n      chainId\n    } = params;\n    log.debug(\"connected chainId\", chainId);\n    const connectedChainId = parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n\n    if (connectedChainId !== parseInt(this.chainConfig.chainId, 16)) {\n      // we need to create a new session since old session is already used and\n      // user needs to login again with correct chain with new qr code.\n      await this.createNewSession({\n        forceNewSession: true\n      });\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletInitializationError.fromCode(5000, \"Not connected to correct chainId. Expected: \".concat(this.chainConfig.chainId, \", Current: \").concat(connectedChainId, \", Please switch to correct chain from wallet\")));\n      return;\n    }\n\n    await this.wcProvider.setupProvider(this.connector);\n    this.subscribeEvents(this.connector);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1,\n      reconnected: this.rehydrated\n    });\n  }\n\n  subscribeEvents(connector) {\n    connector.on(\"session_update\", async error => {\n      if (error) {\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n      }\n    });\n  }\n\n  getWalletConnectInstance() {\n    const walletConnectOptions = this.adapterOptions.adapterSettings || {};\n    walletConnectOptions.bridge = walletConnectOptions.bridge || \"https://bridge.walletconnect.org\"; // Create a connector\n\n    return new WalletConnect(walletConnectOptions);\n  }\n\n}\n\nexport { WalletConnectV1Adapter };","map":{"version":3,"sources":["../src/walletConnectV1adapter.ts"],"names":["WALLET_ADAPTERS","WALLET_CONNECT_V1","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","uri","constructor","options","connected","provider","init","getChainConfig","config","chainConfig","ADAPTER_EVENTS","accounts","chainId","connect","WalletInitializationError","adapter","reject","payload","resolve","log","error","WalletLoginError","getUserInfo","disconnect","cleanup","createNewSession","opts","forceNewSession","parseInt","onConnectHandler","connectedChainId","isHexStrict","reconnected","rehydrated","subscribeEvents","connector","getWalletConnectInstance","walletConnectOptions"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\r\nimport WalletConnect from '@walletconnect/client';\r\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError, isHexStrict } from '@web3auth/base';\r\nimport { WalletConnectProvider } from '@web3auth/ethereum-provider';\r\nimport log from 'loglevel';\r\n\r\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\r\n\r\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\r\n\r\nclass WalletConnectV1Adapter extends BaseAdapter {\r\n  constructor() {\r\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    super();\r\n\r\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.WALLET_CONNECT_V1);\r\n\r\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\r\n\r\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\r\n\r\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\r\n\r\n    _defineProperty(this, \"adapterOptions\", void 0);\r\n\r\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\r\n\r\n    _defineProperty(this, \"adapterData\", {\r\n      uri: \"\"\r\n    });\r\n\r\n    _defineProperty(this, \"connector\", null);\r\n\r\n    _defineProperty(this, \"wcProvider\", null);\r\n\r\n    _defineProperty(this, \"rehydrated\", false);\r\n\r\n    this.adapterOptions = _objectSpread({}, options);\r\n    this.chainConfig = options.chainConfig || null;\r\n  }\r\n\r\n  get connected() {\r\n    var _this$connector;\r\n\r\n    return !!((_this$connector = this.connector) !== null && _this$connector !== void 0 && _this$connector.connected);\r\n  }\r\n\r\n  get provider() {\r\n    var _this$wcProvider;\r\n\r\n    return ((_this$wcProvider = this.wcProvider) === null || _this$wcProvider === void 0 ? void 0 : _this$wcProvider.provider) || null;\r\n  }\r\n\r\n  set provider(_) {\r\n    throw new Error(\"Not implemented\");\r\n  }\r\n\r\n  async init() {\r\n    super.checkInitializationRequirements();\r\n\r\n    if (!this.chainConfig) {\r\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\r\n    } // Create a connector\r\n\r\n\r\n    this.connector = this.getWalletConnectInstance();\r\n    this.wcProvider = new WalletConnectProvider({\r\n      config: {\r\n        chainConfig: this.chainConfig\r\n      }\r\n    });\r\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\r\n    this.status = ADAPTER_STATUS.READY;\r\n\r\n    if (this.connector.connected) {\r\n      this.rehydrated = true;\r\n      await this.onConnectHandler({\r\n        accounts: this.connector.accounts,\r\n        chainId: this.connector.chainId.toString()\r\n      });\r\n    }\r\n  }\r\n\r\n  async connect() {\r\n    super.checkConnectionRequirements();\r\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\r\n\r\n    if (this.connected) {\r\n      await this.onConnectHandler({\r\n        accounts: this.connector.accounts,\r\n        chainId: this.connector.chainId.toString()\r\n      });\r\n      return this.provider;\r\n    }\r\n\r\n    if (this.status !== ADAPTER_STATUS.CONNECTING) {\r\n      var _this$adapterOptions$;\r\n\r\n      // for wallet connect qr code modal we have to create a new connector, coz wallet connect internally does not open\r\n      // modal again on existing instance if connection is pending.\r\n      if ((_this$adapterOptions$ = this.adapterOptions.adapterSettings) !== null && _this$adapterOptions$ !== void 0 && _this$adapterOptions$.qrcodeModal) {\r\n        this.connector = this.getWalletConnectInstance();\r\n      }\r\n\r\n      await this.createNewSession();\r\n      this.status = ADAPTER_STATUS.CONNECTING;\r\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\r\n        adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1\r\n      });\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\")); // for wallet connect default modal.\r\n\r\n      this.connector.on(\"modal_closed\", async () => {\r\n        this.status = ADAPTER_STATUS.READY;\r\n        this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\r\n        return reject(new Error(\"User closed modal\"));\r\n      });\r\n\r\n      try {\r\n        // Subscribe to session connection\r\n        this.connector.on(\"connect\", async (error, payload) => {\r\n          if (error) {\r\n            this.emit(ADAPTER_EVENTS.ERRORED, error);\r\n          }\r\n\r\n          await this.onConnectHandler(payload.params[0]);\r\n          return resolve(this.provider);\r\n        });\r\n      } catch (error) {\r\n        log.error(\"Wallet connect v1 adapter error while connecting\", error); // ready again to be connected\r\n\r\n        this.status = ADAPTER_STATUS.READY;\r\n        this.rehydrated = true;\r\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\r\n        reject(error instanceof Web3AuthError ? error : WalletLoginError.connectionError(\"Failed to login with wallet connect: \".concat((error === null || error === void 0 ? void 0 : error.message) || \"\")));\r\n      }\r\n    });\r\n  }\r\n\r\n  async getUserInfo() {\r\n    if (!this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\r\n    return {};\r\n  }\r\n\r\n  async disconnect() {\r\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\r\n      cleanup: false\r\n    };\r\n    const {\r\n      cleanup\r\n    } = options;\r\n    if (!this.connector || !this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\r\n    await this.connector.killSession();\r\n    this.rehydrated = false;\r\n\r\n    if (cleanup) {\r\n      this.connector = null;\r\n      this.status = ADAPTER_STATUS.NOT_READY;\r\n      this.wcProvider = null;\r\n    } else {\r\n      // ready to connect again\r\n      this.status = ADAPTER_STATUS.READY;\r\n    }\r\n\r\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\r\n  }\r\n\r\n  async createNewSession() {\r\n    var _this$adapterOptions, _this$adapterOptions$2;\r\n\r\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\r\n      forceNewSession: false\r\n    };\r\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\r\n\r\n    if (opts.forceNewSession && this.connector.pending) {\r\n      await this.connector.killSession();\r\n    } // for wallet connect qr modal\r\n\r\n\r\n    if ((_this$adapterOptions = this.adapterOptions) !== null && _this$adapterOptions !== void 0 && (_this$adapterOptions$2 = _this$adapterOptions.adapterSettings) !== null && _this$adapterOptions$2 !== void 0 && _this$adapterOptions$2.qrcodeModal) {\r\n      var _this$chainConfig;\r\n\r\n      await this.connector.createSession({\r\n        chainId: parseInt(((_this$chainConfig = this.chainConfig) === null || _this$chainConfig === void 0 ? void 0 : _this$chainConfig.chainId) || \"0x1\", 16)\r\n      });\r\n      return;\r\n    } // for web3auth qr code modal\r\n\r\n\r\n    return new Promise((resolve, reject) => {\r\n      var _this$chainConfig2;\r\n\r\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\r\n      log.debug(\"creating new session for web3auth wallet connect\");\r\n      this.connector.on(\"display_uri\", async (err, payload) => {\r\n        var _this$connector2;\r\n\r\n        if (err) {\r\n          this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.connectionError(\"Failed to display wallet connect qr code\"));\r\n          return reject(err);\r\n        }\r\n\r\n        const uri = payload.params[0];\r\n        this.updateAdapterData({\r\n          uri\r\n        });\r\n        (_this$connector2 = this.connector) === null || _this$connector2 === void 0 ? void 0 : _this$connector2.off(\"display_uri\");\r\n        return resolve();\r\n      });\r\n      this.connector.createSession({\r\n        chainId: parseInt(((_this$chainConfig2 = this.chainConfig) === null || _this$chainConfig2 === void 0 ? void 0 : _this$chainConfig2.chainId) || \"0x1\", 16)\r\n      }).catch(error => {\r\n        log.error(\"error while creating new wallet connect session\", error);\r\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\r\n        return reject(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  async onConnectHandler(params) {\r\n    if (!this.connector || !this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\r\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"Chain config is not set\");\r\n    const {\r\n      chainId\r\n    } = params;\r\n    log.debug(\"connected chainId\", chainId);\r\n    const connectedChainId = parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\r\n\r\n    if (connectedChainId !== parseInt(this.chainConfig.chainId, 16)) {\r\n      // we need to create a new session since old session is already used and\r\n      // user needs to login again with correct chain with new qr code.\r\n      await this.createNewSession({\r\n        forceNewSession: true\r\n      });\r\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletInitializationError.fromCode(5000, \"Not connected to correct chainId. Expected: \".concat(this.chainConfig.chainId, \", Current: \").concat(connectedChainId, \", Please switch to correct chain from wallet\")));\r\n      return;\r\n    }\r\n\r\n    await this.wcProvider.setupProvider(this.connector);\r\n    this.subscribeEvents(this.connector);\r\n    this.status = ADAPTER_STATUS.CONNECTED;\r\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\r\n      adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1,\r\n      reconnected: this.rehydrated\r\n    });\r\n  }\r\n\r\n  subscribeEvents(connector) {\r\n    connector.on(\"session_update\", async error => {\r\n      if (error) {\r\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\r\n      }\r\n    });\r\n  }\r\n\r\n  getWalletConnectInstance() {\r\n    const walletConnectOptions = this.adapterOptions.adapterSettings || {};\r\n    walletConnectOptions.bridge = walletConnectOptions.bridge || \"https://bridge.walletconnect.org\"; // Create a connector\r\n\r\n    return new WalletConnect(walletConnectOptions);\r\n  }\r\n\r\n}\r\n\r\nexport { WalletConnectV1Adapter };\r\n//# sourceMappingURL=walletConnectV1Adapter.esm.js.map\r\n"]},"metadata":{},"sourceType":"module"}