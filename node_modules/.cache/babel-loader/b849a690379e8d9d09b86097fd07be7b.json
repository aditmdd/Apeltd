{"ast":null,"code":"import randombytes from 'randombytes';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport base64urlLib from 'base64url';\nimport keccakLib from 'keccak'; // TODO: should be crypto safe\n\nconst randomId = () => randombytes(32).toString(\"hex\");\n\nclass URLWithHashParams extends URL {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"hashParams\", new URLSearchParams());\n  }\n\n  toString() {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n\n}\n\nconst base64url = base64urlLib;\n\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\n\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\n\nconst keccak = keccakLib;\n\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\n\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\n\nfunction keccak256(str) {\n  let input = str;\n\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n\n  const data = \"0x\".concat(keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\"));\n  return data;\n}\n\nexport { URLWithHashParams, base64toJSON, base64url, jsonToBase64, keccak, keccak256, randomId, safeatob, safebtoa };","map":{"version":3,"sources":["../src/randomId.ts","../src/url.ts","../src/utils.ts"],"names":["randomId","randombytes","URLWithHashParams","URL","toString","base64url","base64urlLib","safebtoa","str","safeatob","keccak","keccakLib","base64toJSON","b64str","JSON","jsonToBase64","json","keccak256","input","Buffer","data"],"mappings":";;;gCAAA;;MAGaA,QAAQ,GAAG,MAAcC,WAAW,CAAXA,EAAW,CAAXA,CAAAA,QAAAA,CAAAA,KAAAA,C;;MCDzBC,iB,SAA0BC,G,CAAAA;;;;wCACZ,IAAA,eAAA,E;;;AAEzBC,EAAAA,QAAQ,GAAA;AACN,SAAA,IAAA,GAAY,KAAA,UAAA,CAAZ,QAAY,EAAZ;AACA,WAAO,MAAA,QAAA,CAAA,IAAA,CAAP,IAAO,CAAP;AACD;;AANoCD;;MCC1BE,SAAS,GAAGC,Y;;SAETC,Q,CAASC,G,EAAAA;AACvB,SAAOH,SAAS,CAATA,MAAAA,CAAP,GAAOA,CAAP;AACD;;SAEeI,Q,CAASD,G,EAAAA;AACvB;AACA,SAAOH,SAAS,CAATA,MAAAA,CAAP,GAAOA,CAAP;AACD;;MAEYK,MAAM,GAAGC,S;;SAINC,Y,CAAaC,M,EAAAA;AAC3B,SAAOC,IAAI,CAAJA,KAAAA,CAAWT,SAAS,CAATA,MAAAA,CAAlB,MAAkBA,CAAXS,CAAP;AACD;;SAEeC,Y,CAAaC,I,EAAAA;AAC3B,SAAOX,SAAS,CAATA,MAAAA,CAAiBS,IAAI,CAAJA,SAAAA,CAAxB,IAAwBA,CAAjBT,CAAP;AACD;;SAEeY,S,CAAUT,G,EAAAA;AACxB,MAAIU,KAAK,GAAT,GAAA;;AACA,MAAI,OAAA,GAAA,KAAA,QAAA,IAA2BV,GAAG,CAAHA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAA3B,IAAA,IAAuDA,GAAG,CAAHA,MAAAA,KAA3D,EAAA,EAA8E;AAC5EU,IAAAA,KAAK,GAAGC,MAAM,CAANA,IAAAA,CAAYX,GAAG,CAAHA,KAAAA,CAAZW,CAAYX,CAAZW,EAARD,KAAQC,CAARD;AACD;;AACD,QAAME,IAAI,GAAA,KAAA,MAAA,CAAQV,MAAM,CAANA,WAAM,CAANA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,MAAAA,CAAAA,KAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAlB,GAAkBA,CAAR,CAAV;AACA,SAAA,IAAA;AACD","sourcesContent":["import randombytes from 'randombytes';\r\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\r\nimport base64urlLib from 'base64url';\r\nimport keccakLib from 'keccak';\r\n\r\n// TODO: should be crypto safe\r\nconst randomId = () => randombytes(32).toString(\"hex\");\r\n\r\nclass URLWithHashParams extends URL {\r\n  constructor() {\r\n    super(...arguments);\r\n\r\n    _defineProperty(this, \"hashParams\", new URLSearchParams());\r\n  }\r\n\r\n  toString() {\r\n    this.hash = this.hashParams.toString();\r\n    return super.toString.call(this);\r\n  }\r\n\r\n}\r\n\r\nconst base64url = base64urlLib;\r\nfunction safebtoa(str) {\r\n  return base64url.encode(str);\r\n}\r\nfunction safeatob(str) {\r\n  // Going backwards: from bytestream, to percent-encoding, to original string.\r\n  return base64url.decode(str);\r\n}\r\nconst keccak = keccakLib;\r\nfunction base64toJSON(b64str) {\r\n  return JSON.parse(base64url.decode(b64str));\r\n}\r\nfunction jsonToBase64(json) {\r\n  return base64url.encode(JSON.stringify(json));\r\n}\r\nfunction keccak256(str) {\r\n  let input = str;\r\n\r\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\r\n    input = Buffer.from(str.slice(2), \"hex\");\r\n  }\r\n\r\n  const data = \"0x\".concat(keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\"));\r\n  return data;\r\n}\r\n\r\nexport { URLWithHashParams, base64toJSON, base64url, jsonToBase64, keccak, keccak256, randomId, safeatob, safebtoa };\r\n//# sourceMappingURL=openloginUtils.esm.js.map\r\n"]},"metadata":{},"sourceType":"module"}