{"ast":null,"code":"var _s = $RefreshSig$();\n\n// CustomHooks.js\nimport { useEffect, useState } from 'react';\nexport const useWindowWidthAndHeight = () => {\n  _s();\n\n  // 1- Get the size of window \n  let windowInnerSize = [window.innerWidth, window.innerHeight]; // 2- Define the state variable windowSize and pass windowInnerSize as its initial value\n\n  let [windowSize, setWidowSize] = useState(windowInnerSize);\n  useEffect(() => {\n    const changeWindowSize = () => {\n      setWidowSize([window.innerWidth, window.innerHeight]);\n    };\n    /* 3- add a 'resize' eventListener to window\r\n       so whenever the size of window changes\r\n    the state variable windowSize changes and the component  re-renders */\n\n\n    window.addEventListener(\"resize\", changeWindowSize); // 4- cleanup the 'resize' eventListener\n\n    return () => window.removeEventListener('resize', changeWindowSize);\n  }, []); // 5- return the window size\n\n  return windowSize;\n};\n\n_s(useWindowWidthAndHeight, \"dtVQAocBnbvPO4V0q9B+K/oZbi0=\");","map":{"version":3,"sources":["C:/xampp/htdocs/youtube-tutorials/Twitter-Start/src/components/CustomHooks.js"],"names":["useEffect","useState","useWindowWidthAndHeight","windowInnerSize","window","innerWidth","innerHeight","windowSize","setWidowSize","changeWindowSize","addEventListener","removeEventListener"],"mappings":";;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,uBAAuB,GAAG,MAAI;AAAA;;AACvC;AACA,MAAIC,eAAe,GAAG,CAACC,MAAM,CAACC,UAAR,EAAoBD,MAAM,CAACE,WAA3B,CAAtB,CAFuC,CAIvC;;AACA,MAAI,CAAEC,UAAF,EAAcC,YAAd,IAA+BP,QAAQ,CAACE,eAAD,CAA3C;AAEAH,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMS,gBAAgB,GAAG,MAAI;AACzBD,MAAAA,YAAY,CAAC,CAACJ,MAAM,CAACC,UAAR,EAAoBD,MAAM,CAACE,WAA3B,CAAD,CAAZ;AACH,KAFD;AAGA;AACR;AACA;;;AACQF,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCD,gBAAlC,EAPU,CASV;;AACA,WAAO,MAAKL,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCF,gBAArC,CAAZ;AACH,GAXQ,EAWN,EAXM,CAAT,CAPuC,CAmBvC;;AACA,SAAOF,UAAP;AACH,CArBM;;GAAML,uB","sourcesContent":["// CustomHooks.js\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport const useWindowWidthAndHeight = ()=>{\r\n    // 1- Get the size of window \r\n    let windowInnerSize = [window.innerWidth, window.innerHeight];\r\n\r\n    // 2- Define the state variable windowSize and pass windowInnerSize as its initial value\r\n    let [ windowSize, setWidowSize ] = useState(windowInnerSize);\r\n\r\n    useEffect(()=>{\r\n        const changeWindowSize = ()=>{\r\n            setWidowSize([window.innerWidth, window.innerHeight]);\r\n        }\r\n        /* 3- add a 'resize' eventListener to window\r\n           so whenever the size of window changes\r\n        the state variable windowSize changes and the component  re-renders */\r\n        window.addEventListener(\"resize\", changeWindowSize);\r\n\r\n        // 4- cleanup the 'resize' eventListener\r\n        return ()=> window.removeEventListener('resize', changeWindowSize);\r\n    }, []);\r\n    // 5- return the window size\r\n    return windowSize;\r\n}"]},"metadata":{},"sourceType":"module"}